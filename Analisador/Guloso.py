#encoding: UTF-8from scipy.sparse import lil_matriximport pickleimport numpy as npimport copyimport syssys.setdefaultencoding('utf8')def guloso(k, T, tau, S):	print (".:: BEGIN ::.\n")	output = []				G = []								#conjunto auxiliar	C = 0 								#contador	U = copy.copy(S)	t = {}	W = {}	#calcula o tempo t_j	for j in range(0, T.shape[1]):		t[j] = 0		while (C != k) and (len(U) != 0):			#calcula o peso de W_i		for i in S:			soma = 0			for j in S[i]:				soma += min(tau - t[j], T[i, j])			W[i] = soma			#print "W[%s] = %s" %(i, soma)					#selecionar Si E U que maximiza Wi		maior = 0		Si = None				for i in U:			if W[i] > maior:				maior = W[i]				Si = i		output.append(Si)#		print ("#%s selecionou S_%s" %((C+1), (Si + 1)))				#uniao de G		for i in S[Si]:			#print "para S[%s]" % Si			if G.count(i) == 0:				#print "G recebe ",i				G.append(i)				#incrementa contador		C += 1		#print "C = ",C				#retira do conjunto		U.pop(Si)				#calcula o tempo t_j		for j in t:			t[j] = min(tau, t[j] + T[Si, j])			#print "t[j] = ",t[j]				log = open('teste.txt', 'a')		log.write("%s\n" %(Si))		print (Si + 1)					log.close()		#print ""	print (".:: END ::.")		return output		matrix = Nonewith open('matrix-9s-agg.dat', 'rb') as infile:	matrix = pickle.load(infile,  encoding='latin1')S = {}	#subconjunto com Si. Cada elemento  Si  in S representa uma intercção, que presenta a quantidade de veiculo na interseção Si.		with open('S-9s-agg.dat', 'rb') as infile:	S = pickle.load(infile)			guloso(25, matrix, 30, S)#k = 5, 10, 15, 20 e 25      