# encoding: utf-8from scipy.sparse import lil_matriximport _pickle as cPicklematrix = Nonewith open('matrix2.dat', 'rb') as infile:	matrix = cPickle.load(infile, encoding='latin1')S = {}	#subconjunto com Si. Cada elemento  Si  in S representa uma intercção, que presenta a quantidade de veiculo na interseção Si.		with open('S2.dat', 'rb') as infile:	S = cPickle.load(infile, encoding='latin1')TAU = 65T_VEICULOS	=  matrix.shape[0]#---------- Cruzamentos -----------#"""Carregando cruzamentos do arquivo."""file_rsu = open("data/koln.txt", "r")    # arquivo com traços de mobilidadedps = {}cont = 0ddd = []cruzamentos = file_rsu.readlines()for cruzamento in cruzamentos:    linha = cruzamento.split(" ")    id = linha[0]    dps[id] = cont    ddd.append(id)    cont += 1#----------------------------------#def cobertura(rsu):	X = {}	cobertura = 0	for i in rsu:		try:			for j in S[i]:				if j in X:					X[j] += matrix[i, j]				else:					X[j] = matrix[i, j]		except KeyError:			#print("caiu aqui")			pass	for v in X:		if X[v] >= TAU:			cobertura += 1	saida = float(cobertura)/T_VEICULOS	#print("cobertura",a,"/",POPULACAO," = ",saida)	return saidaP = 15def calc(agg, intt, temp):	l_temp, l_agg, l_int =[],[],[]	f_agg = agg.readlines()	c = 0	for i in f_agg:		i = i.split(" ")[0]		if i in ddd:			c+=1			l_agg.append(dps[i.rstrip()])			if(c == P): break		f_temp = temp.readlines()	c = 0	for i in f_temp:		i = i.split(" ")[0]		if i.rstrip() in ddd:			c+=1			l_temp.append(dps[i.rstrip()])			if(c == P): break	f_int = intt.readlines()[1:]	r = []	for i in f_int:		key = i.split()[0]		if "#" in key:			l_int.append(cobertura(r))			r = []		elif key in ddd:			key = dps[i.split()[0]] #verificar o que faltou #			r.append(key)	l_int.append(cobertura(r))	#r_agg = cobertura(l_agg)	#r_temp = cobertura(l_temp)	#print(r_agg)	#print(r_temp)	print(l_int[0:P])def sum(column):	total = 0	for row in range(T_VEICULOS):	    total += matrix[row,column]	return totaldef tempo_contato(agg, intt,  temp):	#l_temp, l_agg, l_int =[],[],[]	l_temp, l_agg, l_int = 0,0,[]	P = 20	f_agg = agg.readlines()	c=0	for i in f_agg:		i = i.split(" ")[0]		key = dps[i.rstrip()]		#print(i.rstrip())		l_agg += sum(key)		c+=1		if(c == P): break	f_temp = temp.readlines()	c=0	for i in f_temp:		i = i.split(" ")[0]		key = dps[i.rstrip()]		l_temp += sum(key)		c+=1		if(c == P): break		f_int = intt.readlines()	c=0	for i in f_int:		if not "#" in i:			i = i.split(" ")[0]			key = dps[i.rstrip()]			l_int += sum(key)		else:			print(l_int)				l_int = 0			c+=1			if(c == P):break	#plotar aqui mesmo. BARBLOT	#print(l_agg)	print(l_int)	#print(l_temp)   ls_agg, ls_temp = [], []data_agg = open("position-rsu-agg.txt", "r")data_temp = open("position-rsu-temp.txt", "r")agg = data_agg.readlines()for i in agg:	i = i.split(" ")[1]	ls_agg.append(int(i))temp = data_temp.readlines()for i in temp:	i = i.split(" ")[1]	ls_temp.append(int(i))print("Cobertura agg: " + str(cobertura(ls_agg)))print("Cobertura temp: " + str(cobertura(ls_temp)))	#dg#f_dg_agg = open("data-rsu/rsu_dg_agg.txt", "r")#f_dg_int = open("data-rsu/rsu_dg_int.txt", "r")#f_gd_temp = open("data-rsu/rsu_dg_temp.txt", "r")#tempo_contato(f_dg_agg, f_dg_int, f_gd_temp)#calc(f_dg_agg, f_dg_int, f_gd_temp)#cls#f_cls_agg = open("../data-rsu/rsu_cls_agg.txt", "r")#f_cls_int = open("../data-rsu/rsu_cls_int.txt", "r")#f_cls_temp = open("../data-rsu/rsu_cls_temp.txt", "r")#tempo_contato(f_cls_agg, f_cls_int, f_cls_temp)#calc(f_cls_agg, f_cls_int, f_cls_temp)#btw#f_btw_agg = open("../data-rsu/rsu_btw_agg.txt", "r")#f_btw_int = open("../data-rsu/rsu_btw_int.txt", "r")#f_btw_temp = open("../data-rsu/rsu_btw_temp.txt", "r")#tempo_contato(f_btw_agg, f_btw_int, f_btw_temp)#calc(f_btw_agg, f_btw_int, f_btw_temp)					      